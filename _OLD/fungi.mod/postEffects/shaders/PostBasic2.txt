<shader>{
	"name"		: "PostBasic",
	"ubo"		: [ "UBOTransform" ],
	"options"	: { "modelMatrix":false },
	"uniforms"	: [
		{ "name":"u_colorTex", "type":"sampler2D" },
		{ "name":"u_depthTex", "type":"sampler2D" },
		{ "name":"u_shadowTex", "type":"sampler2D" },
		{ "name":"u_projMatrixInv", "type":"mat4" },
		{ "name":"u_viewMatrixInv", "type":"mat4" },
		{ "name":"u_lightProjMatrix", "type":"mat4" }
	]
}<\shader>
	
<materials>[
	{ "name":"PostBasic", "options": { "depthTest":false } }
]<\materials>
	
<vertex>
	#version 300 es
	layout(location=0) in vec3 a_position;
	layout(location=2) in vec2 a_uv;

	uniform UBOTransform{
		mat4 	projViewMatrix;
		vec3	cameraPos;
		float	globalTime;
		vec2	screenSize;
	};

	out highp vec2 v_uv;

	void main(void){
		v_uv = a_uv;
		gl_Position	= vec4(a_position.xyz,1.0);
	}
<\vertex>

<fragment>
	#version 300 es
	precision mediump float;

	in highp vec2 v_uv;
	uniform sampler2D u_colorTex;
	uniform sampler2D u_depthTex;
	uniform sampler2D u_shadowTex;

	uniform mat4 u_projMatrixInv;
	uniform mat4 u_viewMatrixInv;
	uniform mat4 u_lightProjMatrix;

	out vec4 oFragColor;

	vec3 WorldPosFromDepth(vec2 uv, float depth) {
	    //float z = depth * 2.0 - 1.0;							// To Clip Space (Map from 0,1 to -1,1)
	    //vec4 clipSpacePos = vec4(uv * 2.0 - 1.0, z, 1.0);
	    vec4 clipSpacePos = vec4( vec3(uv,depth) * 2.0 - 1.0, 1.0);

	    vec4 viewSpacePos = u_projMatrixInv * clipSpacePos;		// To View Space

	    viewSpacePos /= viewSpacePos.w;							// Perspective division
	    vec4 worldSpacePos = u_viewMatrixInv * viewSpacePos;	// To World Space
	    return worldSpacePos.xyz;
	}

	void main(void){
		//Full Screen rendering, Can use texelFetch and current X,Y position
			//ivec2 fCoord = ivec2(gl_FragCoord.xy);		//Get the Int of the current Screen pixel X,Y
			//vec4 color = texelFetch(u_colorTex, fCoord , 0);

		vec4 cDepth = texture(u_depthTex, v_uv);
		vec4 cShadow = texture(u_shadowTex, v_uv);
		vec4 cColor = texture(u_colorTex, v_uv);

		//........
		vec3 fragWorldPos	= WorldPosFromDepth(v_uv, cDepth.r);
		vec4 fragLightPos 	= u_lightProjMatrix * vec4(fragWorldPos, 1.0);
		vec3 shadowUV		= (fragLightPos.xyz / fragLightPos.w) * 0.5 + 0.5; //Map from -1,1 to 0-1
		float depthLight2Frag = texture(u_shadowTex, shadowUV.xy).r;

		//float inShadow		= step(shadowUV.z, depthLight2Frag );
		float inShadow		= step(shadowUV.z - 0.002, depthLight2Frag ); //Fix Shadow Acne

		//float bias = max(0.05 * (1.0 - dot( fragNormal, normalize( fragToLightDir ) )), 0.005);
		//float inShadow		= step(shadowUV.z - bias, depthLight2Frag ); //Fix Shadow Acne



		oFragColor = vec4(vec3(inShadow), 1.0);// * vec4(1.0, 0.0, 0.0, 1.0);

		if(shadowUV.z > 1.0) inShadow = 1.0; //Dont shadow anything outside the shadow map range

		//oFragColor = vec4( vec3(cShadow.r), 1.0 );

		if(inShadow == 0.0) cColor.rgb *= 0.4;
		oFragColor = cColor;
	}
<\fragment>