<shader>{ 
	"name"		: "Grid001",
	"options"	: { "modelMatrix":true, "normalMatrix":false },
	"ubo"		: [ "UBOTransform" ],
	"uniforms"	: [
		{ "name":"u_cellSize",		"type":"float" },
		{ "name":"u_pixelSize",		"type":"float" },
		{ "name":"u_baseColor",		"type":"vec4" },
		{ "name":"u_lineColor",		"type":"vec4" },
		{ "name":"u_xAxisColor",	"type":"vec4" },
		{ "name":"u_yAxisColor",	"type":"vec4" }
	]
}<\shader>
/*
	{ "name":"u_", "type":"sampler2D" },
	{ "name":"u_", "type":"vec3" },
	{ "name":"u_", "type":"float" },
*/
<materials> [ { 
	"name"		: "Grid001",
	"options"	: { "blend":true,"sampleAlphaCoverage":false, "depthTest":true },
	"uniforms"	: [ 
		{ "name":"u_cellSize",		"value":0.2 },
		{ "name":"u_pixelSize",		"value":0.4 },
		{ "name":"u_baseColor",		"value":"#ffffffff", "type":"rgba" },
		{ "name":"u_lineColor",		"value":"#e6e6e6ff", "type":"rgba" },
		{ "name":"u_xAxisColor",	"value":"#ff9999ff", "type":"rgba" },
		{ "name":"u_yAxisColor",	"value":"#66ff66ff", "type":"rgba" }
	]
} ] <\materials>
/*
	{ "name":"u_", "type":"tex", "value":"tex01"},
	{ "name":"u_", "value":[5,1,0] },
	{ "name":"u_", "type":"rgb", "value":"#ffffff"},
*/		
<vertex>
	#version 300 es
	layout(location=0) in vec3 a_position;
	layout(location=2) in vec2 a_uv;

	uniform UBOTransform{
		mat4 	projViewMatrix;
		vec3	cameraPos;
		float	globalTime;
		vec2	screenSize;
	};

	uniform mat4 u_modelMatrix;

	out vec2 v_uv;
	out vec3 v_worldPos;

	void main(void){
		//..............................
		vec4 worldPos	= u_modelMatrix * vec4(a_position,1.0);

		//..............................
		v_uv			= a_uv;
		v_worldPos		= worldPos.xyz;

		//..............................
		gl_Position		= projViewMatrix * worldPos;
	}
<\vertex>

http://madebyevan.com/shaders/grid/
http://codeflow.org/entries/2012/aug/02/easy-wireframe-display-with-barycentric-coordinates/
https://www.gamedev.net/forums/topic/529926-terrain-contour-lines-using-pixel-shader/
https://realtimemike.wordpress.com/2012/02/07/anti-aliasing-and-edge-lines/
<fragment>
	#version 300 es
	precision mediump float;

	in vec2 v_uv;
	in vec3 v_worldPos;

	uniform float u_cellSize;
	uniform float u_pixelSize;
	uniform vec4 u_baseColor;
	uniform vec4 u_lineColor;
	uniform vec4 u_xAxisColor;
	uniform vec4 u_yAxisColor;

	out vec4 oFragColor;

	void main(void){
		//float cellSize	= 0.2;
		//float pixelSize	= 0.4;
		//vec4 baseColor	= vec4(1.0, 1.0, 1.0, 1.0);
		//vec4 lineColor	= vec4(0.9, 0.9, 0.9, 1.0);
		//vec4 xAxisColor	= vec4(1.0, 0.0, 0.0, 1.0);
		//vec4 yAxisColor	= vec4(0.0, 1.0, 0.0, 1.0);
		
		//.........................................
		vec2 pos 		= v_worldPos.xz / u_cellSize;				//Divide the World up by Cells
		vec2 fwPos		= fwidth(pos);								//Pixel Size based on Cell size
		vec2 gradPos	= abs( fract( pos - 0.5 ) - 0.5 );			//Create gradient to generate lines
		vec2 grad		= (gradPos - fwPos * u_pixelSize) / fwPos;	//use pixel size to limit gradient to make smooth lines
		float w			= min(grad.x, grad.y);						//Smallest gradient value is best for pixel length

		//.........................................
		// How which of the 3 colors to use for the line
		// ( yPix < Pix )? xColor : ( xPix < Pix)? yColor : defaultColor;
		vec4 lColor = mix(
			u_xAxisColor, 
				mix( u_yAxisColor, 
					u_lineColor, 
					step( fwPos.x * 0.9, abs(pos.x) )
				),			
			step( fwPos.y * 0.9, abs(pos.y) )
		);

		//.........................................
		//Fade btween Line Color and Base Color
		oFragColor = mix( lColor, u_baseColor, w );
	}
<\fragment>