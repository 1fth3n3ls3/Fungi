<shader>{ 
	"name"		: "Grid002",
	"options"	: { "modelMatrix":true, "normalMatrix":false },
	"ubo"		: [ "UBOTransform" ],
	"uniforms"	: [
		{ "name":"u_majorCellSize",		"type":"float" },
		{ "name":"u_minorCellSize",		"type":"float" },
		{ "name":"u_majorPixelScale",	"type":"float" },
		{ "name":"u_minorPixelScale",	"type":"float" },
		{ "name":"u_majorStrength",		"type":"float" },
		{ "name":"u_minorStrength",		"type":"float" },
		{ "name":"u_baseColor",			"type":"vec4" },
		{ "name":"u_lineColor",			"type":"vec4" }
	]
}<\shader>

<materials> [
	{	"name"		: "Grid002",
		"options"	: { "blend":true,"sampleAlphaCoverage":false, "depthTest":true },
		"uniforms"	: [ 
			{ "name":"u_majorCellSize",		"value":1.0 },
			{ "name":"u_minorCellSize",		"value":0.2 },
			{ "name":"u_majorPixelScale",	"value":0.5 },
			{ "name":"u_minorPixelScale",	"value":0.1 },
			{ "name":"u_majorStrength",		"value":1.0 },
			{ "name":"u_minorStrength",		"value":1.0 },
			{ "name":"u_baseColor",			"value":"#ffffffff", "type":"rgba" },
			{ "name":"u_lineColor",			"value":"#e6e6e6ff", "type":"rgba" }
		] },

	{	"name"		: "Grid002b",
		"options"	: { "blend":true,"sampleAlphaCoverage":false, "depthTest":true },
		"uniforms"	: [ 
			{ "name":"u_majorCellSize",		"value":1.0 },
			{ "name":"u_minorCellSize",		"value":0.2 },
			{ "name":"u_majorPixelScale",	"value":0.5 },
			{ "name":"u_minorPixelScale",	"value":0.1 },
			{ "name":"u_majorStrength",		"value":0.5 },
			{ "name":"u_minorStrength",		"value":0.3 },
			{ "name":"u_baseColor",			"value":"#336db9ff", "type":"rgba" },
			{ "name":"u_lineColor",			"value":"#e6e6e6ff", "type":"rgba" }
		] },

	{	"name"		: "Grid002c",
		"options"	: { "blend":true,"sampleAlphaCoverage":false, "depthTest":true },
		"uniforms"	: [ 
			{ "name":"u_majorCellSize",		"value":1.0 },
			{ "name":"u_minorCellSize",		"value":0.5 },
			{ "name":"u_majorPixelScale",	"value":0.4 },
			{ "name":"u_minorPixelScale",	"value":0.1 },
			{ "name":"u_majorStrength",		"value":0.4 },
			{ "name":"u_minorStrength",		"value":0.25 },
			{ "name":"u_baseColor",			"value":"#595e7fff", "type":"rgba" },
			{ "name":"u_lineColor",			"value":"#e6e6e6ff", "type":"rgba" }
		] }
] <\materials>

<vertex>
	#version 300 es
	layout(location=0) in vec3 a_position;
	layout(location=2) in vec2 a_uv;

	uniform UBOTransform{
		mat4 	projViewMatrix;
		vec3	cameraPos;
		float	globalTime;
		vec2	screenSize;
	};

	uniform mat4 u_modelMatrix;

	out vec2 v_uv;
	out vec3 v_worldPos;

	void main(void){
		//..............................
		vec4 worldPos	= u_modelMatrix * vec4(a_position,1.0);

		//..............................
		v_uv			= a_uv;
		v_worldPos		= worldPos.xyz;

		//..............................
		gl_Position		= projViewMatrix * worldPos;
	}
<\vertex>

<fragment>
	#version 300 es
	precision mediump float;

	in vec2 v_uv;
	in vec3 v_worldPos;

	uniform float u_majorCellSize;
	uniform float u_minorCellSize;
	uniform float u_majorPixelScale;
	uniform float u_minorPixelScale;
	uniform float u_majorStrength;
	uniform float u_minorStrength;

	uniform vec4 u_baseColor;
	uniform vec4 u_lineColor;

	out vec4 oFragColor;

	float smoothGridLines(vec2 pos, float pixScale){
		vec2 fwPos		= fwidth(pos);							// Pixel Size based on Cell size
		vec2 gradPos	= abs( fract(pos - 0.5) - 0.5 );		// Create gradient to generate lines
		vec2 line 		= (gradPos - fwPos * pixScale) / fwPos;	// Use pixel size to limit gradient to make smooth lines
		return clamp(min(line.x, line.y), 0.0, 1.0);			// Smallest gradient value is best for pixel length
	}

	void main(void){
		vec2 cellSize	= v_worldPos.xz / u_majorCellSize;
		float gradMajor	= (1.0 - smoothGridLines(cellSize, u_majorPixelScale)) * u_majorStrength;
		float gradMinor	= (1.0 - smoothGridLines(cellSize / u_minorCellSize, u_minorPixelScale)) * u_minorStrength;
		float gridMask	= gradMajor + gradMinor;

		//.........................................
		oFragColor = mix( u_baseColor, u_lineColor, gridMask );
		//oFragColor = vec4( vec3( gridMask  ), 1.0);
	}
<\fragment>